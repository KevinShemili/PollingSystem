basePath: /
definitions:
  requests.CreatePollRequest:
    properties:
      categories:
        items:
          type: string
        type: array
      expires_at:
        type: string
      title:
        type: string
    type: object
  requests.LogOutRequest:
    properties:
      user_id:
        type: integer
    type: object
  requests.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  requests.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  requests.TokensRequest:
    properties:
      jwt_token:
        type: string
      refresh_token:
        type: string
    type: object
  results.CreatePollResult:
    type: object
  results.LoginResult:
    properties:
      jwt_token:
        type: string
      refresh_token:
        type: string
    type: object
  results.RefreshResult:
    properties:
      jwt_token:
        type: string
      refresh_token:
        type: string
    type: object
  utility.ErrorCode:
    properties:
      description:
        type: string
      message:
        type: string
      status_code:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: Your API description
  title: Your API Title
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password, returning a JWT token.
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication token and refresh token
          schema:
            $ref: '#/definitions/results.LoginResult'
        "400":
          description: Binding failure
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      summary: Login a user
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Ends the user session by invalidating the token (requires JWT).
      parameters:
      - description: LogOut Request (optional)
        in: body
        name: request
        schema:
          $ref: '#/definitions/requests.LogOutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            type: string
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      security:
      - BearerAuth: []
      summary: Log out a user
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access and refresh tokens using the provided tokens.
      parameters:
      - description: Token Refresh Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.TokensRequest'
      produces:
      - application/json
      responses:
        "200":
          description: New access and refresh tokens
          schema:
            $ref: '#/definitions/results.RefreshResult'
        "400":
          description: Binding failure
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      summary: Refresh user tokens
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: This endpoint registers a new user with the provided details.
      parameters:
      - description: User Registration Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'success: true'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Binding failure or validation errors
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      summary: Register a new user
      tags:
      - Authentication
  /polls:
    post:
      consumes:
      - application/json
      description: Create a new poll with a title, expiration time, and categories.
        The user must be authenticated.
      parameters:
      - description: Create Poll Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreatePollRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Poll created successfully
          schema:
            $ref: '#/definitions/results.CreatePollResult'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      security:
      - BearerAuth: []
      summary: Create a new poll
      tags:
      - Polls
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
