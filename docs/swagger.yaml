basePath: /
definitions:
  requests.AddVoteRequest:
    properties:
      poll_category_id:
        type: integer
    type: object
  requests.CreatePollRequest:
    properties:
      categories:
        items:
          type: string
        type: array
      expires_at:
        type: string
      title:
        type: string
    type: object
  requests.LogOutRequest:
    properties:
      user_id:
        type: integer
    type: object
  requests.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  requests.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  requests.TokensRequest:
    properties:
      jwt_token:
        type: string
      refresh_token:
        type: string
    type: object
  requests.UpdatePollRequest:
    properties:
      delete_categories:
        items:
          type: integer
        type: array
      description:
        type: string
      expires_at:
        type: string
      new_categories:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  results.CreatePollResult:
    properties:
      categories:
        items:
          type: string
        type: array
      expiresAt:
        type: string
      isEnded:
        type: boolean
      title:
        type: string
    type: object
  results.GetPollResult:
    properties:
      categories:
        items:
          properties:
            categoryID:
              type: integer
            categoryName:
              type: string
            votes:
              type: integer
          type: object
        type: array
      description:
        type: string
      expiresAt:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  results.LoginResult:
    properties:
      jwt_token:
        type: string
      refresh_token:
        type: string
    type: object
  results.RefreshResult:
    properties:
      jwt_token:
        type: string
      refresh_token:
        type: string
    type: object
  utility.ErrorCode:
    properties:
      description:
        type: string
      message:
        type: string
      status_code:
        type: integer
    type: object
  utility.PaginatedResponse-results_GetPollResult:
    properties:
      data:
        items:
          $ref: '#/definitions/results.GetPollResult'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
      total_pages:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: Your API description
  title: Your API Title
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password, returning a JWT token.
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication token and refresh token
          schema:
            $ref: '#/definitions/results.LoginResult'
        "400":
          description: Binding failure
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      summary: Login a user
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Ends the user session by invalidating the token (requires JWT).
      parameters:
      - description: LogOut Request (optional)
        in: body
        name: request
        schema:
          $ref: '#/definitions/requests.LogOutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            type: string
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      security:
      - BearerAuth: []
      summary: Log out a user
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access and refresh tokens using the provided tokens.
      parameters:
      - description: Token Refresh Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.TokensRequest'
      produces:
      - application/json
      responses:
        "200":
          description: New access and refresh tokens
          schema:
            $ref: '#/definitions/results.RefreshResult'
        "400":
          description: Binding failure
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      summary: Refresh user tokens
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: This endpoint registers a new user with the provided details.
      parameters:
      - description: User Registration Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'success: true'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Binding failure or validation errors
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      summary: Register a new user
      tags:
      - Authentication
  /polls:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of polls.
      parameters:
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Items per page (default 10)
        in: query
        name: page_size
        type: integer
      - description: Filter text (partial match against title or description)
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of polls
          schema:
            $ref: '#/definitions/utility.PaginatedResponse-results_GetPollResult'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      summary: Get polls with pagination and optional filter
      tags:
      - Polls
    post:
      consumes:
      - application/json
      description: Create a new poll with a title, expiration time, and categories.
        The user must be authenticated.
      parameters:
      - description: Create Poll Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreatePollRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Poll created successfully
          schema:
            $ref: '#/definitions/results.CreatePollResult'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      security:
      - BearerAuth: []
      summary: Create a new poll
      tags:
      - Polls
  /polls/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a poll by providing the poll ID in the route. The user must
        be authenticated.
      parameters:
      - description: Poll ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Poll deleted successfully
          schema:
            type: boolean
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "404":
          description: Poll not found
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      security:
      - BearerAuth: []
      summary: Delete a poll
      tags:
      - Polls
    get:
      consumes:
      - application/json
      description: Retrieve a specific poll by its ID. Requires authentication.
      parameters:
      - description: Poll ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Poll data
          schema:
            $ref: '#/definitions/results.GetPollResult'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "404":
          description: Poll not found
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      security:
      - BearerAuth: []
      summary: Get a specific poll
      tags:
      - Polls
    put:
      consumes:
      - application/json
      description: Updates the specified poll's details, including title, expiration
        date, and categories.
      parameters:
      - description: Poll ID
        in: path
        name: id
        required: true
        type: integer
      - description: Poll update details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.UpdatePollRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Poll updated successfully
          schema:
            type: boolean
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "401":
          description: Unauthorized - Invalid or missing authentication
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      security:
      - BearerAuth: []
      summary: Update a poll's details
      tags:
      - Polls
  /polls/{id}/end:
    patch:
      consumes:
      - application/json
      description: End a poll by providing the poll ID in the route. The user must
        be authenticated.
      parameters:
      - description: Poll ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Poll ended successfully
          schema:
            type: boolean
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "404":
          description: Poll not found
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      security:
      - BearerAuth: []
      summary: End a poll
      tags:
      - Polls
  /polls/{id}/vote:
    post:
      consumes:
      - application/json
      description: Add a vote to a specific poll category by providing the poll ID
        in the route and the category ID in the request body. The user must be authenticated.
      parameters:
      - description: Poll ID
        in: path
        name: id
        required: true
        type: integer
      - description: Add Vote Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.AddVoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Vote added successfully
          schema:
            type: boolean
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "404":
          description: Poll or category not found
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      security:
      - BearerAuth: []
      summary: Vote on a poll
      tags:
      - Polls
  /polls/users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves polls for the given user ID. Requires authentication.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Items per page (default 10)
        in: query
        name: page_size
        type: integer
      - description: Filter text (partial match)
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of user's polls
          schema:
            $ref: '#/definitions/utility.PaginatedResponse-results_GetPollResult'
        "400":
          description: Bad Request - Invalid user ID
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utility.ErrorCode'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utility.ErrorCode'
      security:
      - BearerAuth: []
      summary: Get polls created by a specific user, with pagination/filter
      tags:
      - Polls
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
